name: Recovery Builder - TWRP

on:
  workflow_dispatch:
    inputs:
      MANIFEST_BRANCH:
        description: 'TWRP Minimal-Manifest Branch'
        required: true
        default: ''
        type: choice
        options:
        - twrp-14.1
        - twrp-14
        - twrp-12.1
        - twrp-11
      DEVICE_TREE:
        description: 'Custom Recovery Tree' # Your already made Device Tree for TWRP
        required: true
        default: 'https://github.com/cd-Crypton/custom_recovery_tree_realme_macedonia'
      DEVICE_TREE_BRANCH:
        description: 'Custom Recovery Tree Branch' # Your Device Tree Branch, make sure it's right.
        required: true
        default: 'twrp-12.1'
      DEVICE_PATH:
        description: 'Specify your Device Path' # As is, just like your DEVICE_PATH in your BoardConfig.mk
        required: true
        default: 'device/realme/macedonia'
      DEVICE_NAME:
        description: 'Specify your Device Codename' # As is, just like your PRODUCT_DEVICE in your device tree.
        required: true
        default: 'macedonia'
      BUILD_TARGET:
        description: 'Specify your Build Target' # Pick among boot, recovery and vendor_boot
        required: true
        default: 'recovery'
        type: choice
        options:
        - boot
        - recovery
        - vendorboot
      LDCHECK:
        description: 'Path of blobs to check' # Use it know what kind of dependencies your missing for decryption blobs.
        required: true
        default: 'system/bin/qseecomd'

jobs:
  build:
    name: Build TWRP by ${{ github.actor }}
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:

    # ----------------------------------------------------
    #  1. CRITICAL: Aggressive Disk Cleanup & Check (MOVED TO START)
    #  This step frees 15-25GB needed for the 'repo sync'
    # ----------------------------------------------------
    - name: 🧹  Critical Pre-Sync Cleanup & Check
      run: |
        echo "--- Initial Disk Usage ---"
        df -h
        
          # Aggressively remove unnecessary SDKs and toolchains to free space
          echo "Removing large pre-installed tools (Dotnet, Android SDK, Swift, etc.)..."
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/.ghcup
          sudo rm -rf /usr/lib/jvm # Remove Java JDKs (since you install OpenJDK later)

          # Prune Docker images/cache - MASSIVE space saver
          echo "Pruning Docker system cache..."
          sudo docker system prune -a --force
          
        echo "--- Disk Usage After Aggressive Cleanup ---"
        df -h
        
    - name: Set Swap Space
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 24
        
    - name: Check Out
      uses: actions/checkout@v4
      
    - name: Display Inputs
      run: |
        echo "Displaying variables/inputs."
        echo "Manifest Branch: ${{ inputs.MANIFEST_BRANCH }}"
        echo "Device Tree: ${{ inputs.DEVICE_TREE }}"
        echo "Device Branch: ${{ inputs.DEVICE_TREE_BRANCH }}"
        echo "Device Path: ${{ inputs.DEVICE_PATH }}"
        echo "Device Name: ${{ inputs.DEVICE_NAME }}"
        echo "Build Target: ${{ inputs.BUILD_TARGET }}image"
        
    # NOTE: The 'rokibhasansagar/slimhub_actions' action has been removed as it is now redundant.

    - name: Prepare the environment
      run: |
        sudo apt update && sudo apt upgrade -y
        # Use apt-get for better non-interactive installation
        DEBIAN_FRONTEND=noninteractive sudo apt-get install -yq --no-install-recommends \
            linux-modules-extra-$(uname -r) \
            gperf gcc-multilib gcc-10-multilib g++-multilib g++-10-multilib \
            libc6-dev lib32ncurses-dev x11proto-core-dev libx11-dev tree lib32z-dev libgl1-mesa-dev libxml2-utils \
            xsltproc bc ccache lib32readline-dev lib32z1-dev liblz4-tool libncurses-dev libsdl1.2-dev \
            build-essential libgtk-3-dev libglu1-mesa-dev freeglut3-dev git libxml2 lzop pngcrush schedtool squashfs-tools \
            imagemagick libbz2-dev lzma ncftp qemu-user-static libstdc++-10-dev libncurses6 python3 tar

    - name: Install OpenJDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Install Git-Repo
      run: |
        mkdir ~/bin
        curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
        chmod a+x ~/bin/repo
        sudo ln -sf ~/bin/repo /usr/bin/repo

    - name: Check Manifest Branch
      uses: haya14busa/action-cond@v1
      id: manifest
      with:
        cond: ${{ inputs.MANIFEST_BRANCH == 'twrp-11' || inputs.MANIFEST_BRANCH == 'twrp-12.1' || inputs.MANIFEST_BRANCH == 'twrp-14' || inputs.MANIFEST_BRANCH == 'twrp-14.1' }}
        if_true: https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git
        if_false: https://github.com/minimal-manifest-twrp/platform_manifest_twrp_omni.git

    # ----------------------------------------------------
    #  ENHANCEMENT: Add Repo Cache
    # ----------------------------------------------------
    - name: Cache Repo Sources
      uses: actions/cache@v4
      with:
        path: /home/runner/work/android-recovery # The directory where repo sync downloads files
        key: ${{ runner.os }}-repo-sync-${{ inputs.MANIFEST_BRANCH }}-${{ hashFiles('**/default.xml') }}
        restore-keys: |
          ${{ runner.os }}-repo-sync-

    - name: Initialize Repo
      run: |
        mkdir android-recovery
        cd android-recovery
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
         # Check if the directory is already populated from cache
          if [ ! -d ".repo" ]; then
            repo init --depth=1 -u ${{ steps.manifest.outputs.value }} -b ${{ inputs.MANIFEST_BRANCH }}
          else
            echo "Repo already initialized from cache."
          fi
        
    - name: Repo Sync
      run: |
        cd android-recovery
        repo sync -j$(nproc --all) --force-sync
      
    - name: Clone Device Tree
      run: |
        cd android-recovery
        git clone ${{ inputs.DEVICE_TREE }} -b ${{ inputs.DEVICE_TREE_BRANCH }} ./${{ inputs.DEVICE_PATH }}
        cd ${{ inputs.DEVICE_PATH }}
        echo "COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV

    - name: Check Build Makefile
      run: |
        cd android-recovery
        if [ -f ${{ inputs.DEVICE_PATH }}/twrp_${{ inputs.DEVICE_NAME}}.mk ]; then
            echo "DEVICE_MAKEFILE=twrp_${{ inputs.DEVICE_NAME }}" >> $GITHUB_ENV
        elif [ -f ${{ inputs.DEVICE_PATH }}/omni_${{ inputs.DEVICE_NAME}}.mk ]; then
            echo "DEVICE_MAKEFILE=omni_${{ inputs.DEVICE_NAME }}" >> $GITHUB_ENV
        else
            echo "No recovery makefile file found!"
        fi
      continue-on-error: true

    # ----------------------------------------------------
    #  ENHANCEMENT: Add CCACHE and Monitor Before Build
    # ----------------------------------------------------
    - name: Check Disk Usage Before Build
      run: |
        echo "--- Disk Usage Before Build Step ---"
        df -h
        echo "--- android-recovery folder size ---"
        du -sh android-recovery

    - name: Building Image 
      run: |
        cd android-recovery
        # Set up CCACHE environment for faster subsequent builds (also helps manage build artifacts)
        export CCACHE_DIR=${{ github.workspace }}/.ccache
        ccache -M 50G # Set ccache size limit (adjust as needed)
        
        source build/envsetup.sh
        export ALLOW_MISSING_DEPENDENCIES=true
        lunch ${{ env.DEVICE_MAKEFILE }}-eng && make clean && make ${{ inputs.BUILD_TARGET }}image -j$(nproc --all)
        echo "Done building your ${{ inputs.BUILD_TARGET }}.img"

    - name: Cache Ccache
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/.ccache
        key: ${{ runner.os }}-ccache-${{ inputs.MANIFEST_BRANCH }}-${{ inputs.DEVICE_NAME }}
        restore-keys: |
          ${{ runner.os }}-ccache-
      
    - name: Set Other Build Properties # Output will be use in Release
      run: |
        echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "VENDOR=$(echo "${{ inputs.DEVICE_PATH }}" | cut -d'/' -f2)" >> $GITHUB_ENV
    
    # ... (Remaining steps for Compressing TWRP Build, Upload to Release, and Run LDCheck are unchanged) ...

    - name: Compressing TWRP Build (if Samsung)...
      if: env.VENDOR == 'samsung'
      run: |
        cd android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}
        if [ "${{ inputs.BUILD_TARGET }}" = "boot" ] || [ "${{ inputs.BUILD_TARGET }}" = "recovery" ]; then
          echo "Compressing ${{ inputs.BUILD_TARGET }}.img"
          tar -cvf ${{ inputs.BUILD_TARGET }}.tar ${{ inputs.BUILD_TARGET }}.img
        elif [ "${{ inputs.BUILD_TARGET }}" = "vendorboot" ]; then
          echo "Compressing vendor_boot.img"
          tar -cvf vendor_boot.tar vendor_boot.img
        else
          echo "Unknown build target. Skipping tar..."
        fi
      
    - name: Upload to Release (boot and becovery)
      if: inputs.BUILD_TARGET == 'boot' || inputs.BUILD_TARGET == 'recovery'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/${{ inputs.BUILD_TARGET }}.*
        name: Unofficial TWRP for ${{ inputs.DEVICE_NAME }} // ${{ env.BUILD_DATE }}
        tag_name: ${{ github.run_id }}
        body: |
          Build: ${{ inputs.MANIFEST_BRANCH }}
          Device: [Device Tree/Branch](${{ inputs.DEVICE_TREE }}/tree/${{ inputs.DEVICE_TREE_BRANCH }})
          Commit: Most recent [commit](${{ inputs.DEVICE_TREE }}/commit/${{ env.COMMIT_ID }}) during building.

    - name: Upload to Release (if vendor_boot)
      if: inputs.BUILD_TARGET == 'vendorboot'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/vendor_boot.*
        name: Unofficial TWRP for ${{ inputs.DEVICE_NAME }} // ${{ env.BUILD_DATE }}
        tag_name: ${{ github.run_id }}
        body: |
          Build: ${{ inputs.MANIFEST_BRANCH }}
          Device: [Device Tree/Branch](${{ inputs.DEVICE_TREE }}/tree/${{ inputs.DEVICE_TREE_BRANCH }})
          Commit: Most recent [commit](${{ inputs.DEVICE_TREE }}/commit/${{ env.COMMIT_ID }}) during building.

    - name: Run LDCheck
      run: |
        cd tools
        mv -n libneeds ${GITHUB_WORKSPACE}/android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/recovery/root/
        mv -n ldcheck ${GITHUB_WORKSPACE}/android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/recovery/root/
        cd ../android-recovery/out/target/product/${{ inputs.DEVICE_NAME }}/recovery/root
        python3 ldcheck -p system/lib64:vendor/lib64:system/lib:vendor/lib -d ${{ inputs.LDCHECK }}
        echo "Done checking missing dependencies. Review, and reconfigure your tree."
      continue-on-error: true

      # ----------------------------------------------------
      # 2. CRITICAL FIX: Post-Job Cleanup
      # This MUST run with 'if: always()' to ensure the next run doesn't fail.
      # ----------------------------------------------------
    - name: 🗑️ Final Disk Space Cleanup
      # Ensure this runs ALWAYS, even if the build or upload fails, to prevent the disk from filling up for the next run.
      if: always() 
      run: |
        echo "--- Final Disk Usage BEFORE aggressive cleanup ---"
        df -h
        
          # 1. Clean the main workspace directory (where 'android-recovery' is located)
          echo "Removing android-recovery source code and out directory..."
          # NOTE: This only removes the directory if it exists, safe to run.
          sudo rm -rf android-recovery
        
          # 2. Prune Docker (Massive cleanup)
          echo "Pruning Docker system..."
          sudo docker system prune -a --force
        
          # 3. Clean up the runner's workspace directory (which gets re-created on next run)
          echo "Cleaning up runner's work directory..."
          sudo rm -rf /home/runner/actions-runner/_work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/
          
        echo "--- Final Disk Usage AFTER aggressive cleanup ---"
        df -h
